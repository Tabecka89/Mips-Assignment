#Author: Gal Tabecka, 201668001.
.data
	jtable:		#Jump Table with all of the procedure's names.
		.word add_number
		.word replace_number
		.word delete_number
		.word find_number
		.word find_average
		.word find_max
		.word print_elements
		.word sort_and_print
		.word END
		
	array: .space 120 #Allocating space for 30 numbers.
	array1: .space 120
	arraysz: .word 30
	menu: .asciiz "The options are:\n1. Enter a number (base 10)\n2. Replace a number (base 10)\n3. DEL a number (base 10)\n4. Find a number in the array (base 10)\n5. Find average (base 2-10)\n6. Find Max (base 2-10)\n7. Print the array elements (base 2-10)\n8. Print sort array (base 2-10)\n9. END\n" #Menu
	NUM: .word 0
	new_line: .asciiz "\n"
	full_msg: .asciiz "The array is full.\n"
	empty_msg: .asciiz "The array is empty.\n"
	add_prompt: .asciiz "What number to add? "
	add_success: .asciiz "Number added successfully at index: "
	num_already_in_array: .asciiz "The number is already within the array, at index: "
	replace_prompt: .asciiz "What number to replace? "
	no_such_value: .asciiz "No such value in the array.\n"
	replace_msg_1: .asciiz "Replace the number "
	index_msg: .asciiz " (in index "
	replace_msg_2: .asciiz ") with what number? "
	success_1: .asciiz "The number "
	replace_success_2: .asciiz " was successfuly replaced by the number "
	delete_prompt: .asciiz "What number to delete? "
	delete_success: .asciiz "was successfuly deleted from the array.\n"
	find_prompt: .asciiz "What number to find? "
	find_success: .asciiz " was found in index: "
	base_average_prompt: .asciiz "In what base do you want the average value to be presented? (2-10) "
	average_msg: .asciiz "The average is: "
	base_msg: .asciiz " (base "
	base_max_prompt: .asciiz "In what base do you want the max value to be presented? (2-10) "
	max_msg: .asciiz "The max value in the array is: "
	base_elements_prompt: .asciiz "In what base do you want the elements to be presented? (2-10) "
	closing_bracket: .asciiz ") "
	minus_sign: .asciiz "-"
	comma_sign: .asciiz ", "
	
.text
.globl main
main:
	lw $s1, arraysz #Initializing variables.
	lw $a1, NUM 
	la $a2, array
	la $a3, array1
	
table:
	la $a0, menu #Displaying the menu.
	li $v0, 4
	syscall
	
	li $v0, 5 #Getting input from user.
	syscall
	
	la $a0, jtable #Computing the correct procedure to be stored in $s0.
	move $s0, $v0
	addi $s0, $s0, -1
	sll $s0, $s0, 2         
	add $s0, $s0, $a0
	lw  $s0, ($s0) 
	
	
	      
	jalr $s0 #Calling appropriate procedure.
	
	
	
add_number:
	blt $a1, $s1, not_full #Continue only if NUM < 30.
	la $a0, full_msg
	li $v0, 4
	syscall
	j table
	not_full:
		la $a0, add_prompt #Prompting the user for input.
		li $v0, 4
		syscall
		li $v0, 5 #Reading an Integer.
		syscall
		sub $sp, $sp, 4 #Storing original value of $a3 = new arr address.
		sw $a3, ($sp)
		move $a3, $v0 #Putting the input in $a3.
		jal check #Calling check procedure with the variables: $a1 = array address, $a2 = NUM, $a3 = input from user.
		beq $v0, -1, can_add #If input from user is not in the array (so adding that number is possible), go to appropriate label.
		move $t0, $v0 #If the input number is already in the array, show appropraite message and go back to original menu.
		la $a0, num_already_in_array
		li $v0, 4
		syscall
		move $a0, $t0
		li $v0, 1
		syscall
		la $a0, new_line
		li $v0, 4
		syscall
		lw $a3, ($sp) #Restoring original $a3 value.
		j table
	can_add:
		sll $t0, $a1, 2
		move $t1, $a2
		add $t1, $t0, $a2 #Computing the correct index for insertion, then inserting and displaying success message for the user.
		sw $a3, ($t1)
		la $a0, add_success
		li $v0, 4
		syscall
		move $a0, $a1
		li $v0, 1
		syscall
		addi $a1, $a1, 1
		la $a0, new_line
		li $v0, 4
		syscall
		lw $a3, ($sp) #Restoring original $a3 value.
		j table
		
replace_number:
	bne $a1, $zero, not_empty
	la $a0, empty_msg
	li $v0, 4
	syscall
	j table
	not_empty:
		la $a0, replace_prompt
		li $v0, 4
		syscall
		li $v0, 5
		syscall
		sub $sp, $sp, 4 #Storing original value of $a3.
		sw $a3, ($sp)
		move $a3, $v0
		jal check
		addi $s3, $zero, 0 #$s3 will be used to hold the index of the number the user wishes to replace.
		move $s3, $t3
		beq $v0, -1, cant_replace
		move $t3, $v0
		la $a0, replace_msg_1
		li $v0, 4
		syscall
		move $a0, $a3
		li $v0, 1
		syscall
		la $a0, index_msg
		li $v0, 4
		syscall
		move $a0, $t3
		li $v0, 1
		syscall
		la $a0, replace_msg_2
		li $v0, 4
		syscall
		li $v0, 5
		syscall
		move $a3, $v0
		jal check
		bne $v0, -1, cant_replace_2
		addi $t0, $zero, 0
		sll $s2, $s3, 2
		add $t0, $a2, $s2
		lw $t1, ($t0)
		sw $a3, ($t0)
		la $a0, success_1
		li $v0, 4
		syscall
		la $a0, ($t1)
		li $v0, 1
		syscall
		la $a0, replace_success_2
		li $v0, 4
		syscall
		la $a0, ($a3)
		li $v0, 1
		syscall
		la $a0, index_msg
		li $v0, 4
		syscall
		move $a0, $s3
		li $v0, 1
		syscall
		la $a0, closing_bracket
		li $v0, 4
		syscall
		la $a0, new_line
		syscall
		lw $a3, ($sp) #Restoring $a3.
		j table
	cant_replace:
		la $a0, no_such_value
		li $v0, 4
		syscall
		lw $a3, ($sp) #Restoring $a3.
		j table
	cant_replace_2:
		move $t3, $v0
		la $a0, num_already_in_array
		li $v0, 4
		syscall
		move $a0, $t3
		li $v0, 1
		syscall 
		la $a0, new_line
		li $v0, 4
		syscall
		lw $a3, ($sp) #Restoring $a3.
		j table

delete_number:
	bne $a1, $zero, not_empty_2
	la $a0, empty_msg
	li $v0, 4
	syscall
	j table
	not_empty_2:
		la $a0, delete_prompt
		li $v0, 4
		syscall
		li $v0, 5
		syscall
		sub $sp, $sp, 4 #Storing original $a3 value.
		sw $a3, ($sp)
		move $a3, $v0
		move $s5, $a3
		jal check
		beq $v0, -1, cant_delete
		move $a3, $t3 #$a3 = the index of the number the user wants to delete.
		move $s3, $t3 #Same - for later use.
		jal reduction
		addi $a1, $a1, -1
		move $a3, $s5 #$a5 = the number the user wanted to delete.
		la $a0, success_1
		li $v0, 4
		syscall
		la $a0, ($a3)
		li $v0, 1
		syscall
		la $a0, index_msg
		li $v0, 4
		syscall
		la $a0, ($s3)
		li $v0, 1
		syscall
		la $a0, closing_bracket
		li $v0, 4
		syscall
		la $a0, delete_success
		li $v0, 4
		syscall
		lw $a3, ($sp) #Restoring original $a3 value.
		j table
	cant_delete:
		la $a0, no_such_value
		li $v0, 4
		syscall
		lw $a3, ($sp) #Restoring $a3.
		j table

find_number:
	bne $a1, $zero, not_empty_3 #Continue only if array isn't empty.
	la $a0, empty_msg
	li $v0, 4
	syscall
	j table
	
	not_empty_3:
		la $a0, find_prompt
		li $v0, 4
		syscall
		li $v0, 5
		syscall
		sub $sp, $sp, 4
		sw $a3, ($sp)
		move $a3, $v0
		jal check
		beq $v0, -1, cant_find #If 'check' procedure didn't find the value then go to correct label and return to menu.
		
		#From here its alot of prompts for the user and the display of both the number and the index.
		addi $s3, $zero, 0
		move $s3, $t3
		la $a0, success_1
		li $v0, 4
		syscall
		la $a0, ($a3)
		li $v0, 1
		syscall
		la $a0, find_success
		li $v0, 4
		syscall
		la $a0, ($s3)
		li $v0, 1
		syscall
		la $a0, new_line
		li $v0, 4
		syscall
		lw $a3, ($sp) #Restoring $a3.
		la $a0, ($a3)
		li $v0, 1
		syscall
		j table
	cant_find:
		la $a0, no_such_value
		li $v0, 4
		syscall
		lw $a3, ($sp) #Restoring $a3.
		j table
		
find_average:
	bne $a1, $zero, not_empty_4
	la $a0, empty_msg
	li $v0, 4
	syscall
	j table
	
	not_empty_4:
		addi $t0, $zero, 0 #Initializing loop varaibles.
		addi $t2, $zero, 0 
		addi $t3, $zero, 0
		
	loop_3: #This loop sums up the entire array.
		sll $t0, $t3, 2
		add $t0, $t0, $a2
		lw $t1, ($t0)
		addi $t3, $t3, 1
		add $t2, $t2, $t1
		blt $t3, $a1, loop_3
		
	div $t4, $t2, $a1 #$t4 holds the average in decimal.	
	la $a0, base_average_prompt
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	sub $sp, $sp, 8 #Holding on to the original values of $a1 = NUM and $a2 = arr address.
	sw $a1, 4($sp)
	sw $a2, ($sp)
	move $a1, $t4 #Setting $a1 to the average number computed before.
	move $a2, $v0 #Setting $a2 to the base the user wants. 
	
	la $a0, average_msg
	li $v0, 4
	syscall		
	jal print_num
	lw $a2, ($sp)
	addi $sp, $sp, 4
	lw $a1, ($sp)
	
	#Displaying messages for the user.
	la $a0, base_msg
	li $v0, 4
	syscall		
	move $a0, $t2
	li $v0, 1
	syscall
	la $a0, closing_bracket
	li $v0, 4
	syscall	
	la $a0, new_line
	syscall	
	j table 
		

find_max:
	bne $a1, $zero, not_empty_5
	la $a0, empty_msg
	li $v0, 4
	syscall
	j table
	
	not_empty_5:
	addi $t0, $a2, 0 #Helper variables.
	move $t1, $a1 #$t1 = NUM
	addi $t1, $t1, -1 #$t1 = NUM-1, for number of iterations in the loop.
	addi $t2, $zero, 0 #$t2 will hold the max value.
	addi $t4, $zero, 0 #$t4 will be used as an slt indicator.
	addi $t5, $zero, 1 #Loop counter.
	lw $t2, ($t0)
	beq $a1, 1, skip_loop #If there's only one value - no need to enter the loop.
	loop_6: #This loop uses two registers to compare values in order to figure out the maximum number in the array.
		addi $t0, $t0 ,4
		lw $t3, ($t0)
		slt $t4, $t2, $t3
		bne $t4, 1, no_change
		move $t2, $t3
		no_change:
			addi $t5, $t5, 1
			blt $t5, $a1, loop_6	
	
	skip_loop:
	sub $sp, $sp, 8 #Holding on to the original values of $a1 = NUM and $a2 = arr address.
	sw $a1, 4($sp)
	sw $a2, ($sp)	
	la $a0, base_max_prompt			
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	move $a1, $t2 #$a1 = max.
	move $a2, $v0 #a2 = base.
	la $a0, max_msg
	li $v0, 4
	syscall	
	jal print_num						
	lw $a2, ($sp)
	addi $sp, $sp, 4
	lw $a1, ($sp)
	#Displaying messages for the user.
	la $a0, base_msg
	li $v0, 4
	syscall		
	move $a0, $t2
	li $v0, 1
	syscall
	la $a0, closing_bracket
	li $v0, 4
	syscall	
	la $a0, new_line
	syscall	
	j table

print_elements:
	bne $a1, $zero, not_empty_6
	la $a0, empty_msg
	li $v0, 4
	syscall
	j table	
	
	not_empty_6:
		la $a0, base_elements_prompt
		li $v0, 4
		syscall
		li $v0, 5
		syscall
		move $t4, $a1 #$t4 = number of loop iterations.
		move $t5, $a2 #t5 = array address.
		sub $sp, $sp, 8 #Holding on to the original values of $a1 = NUM and $a2 = arr address.
		sw $a1, 4($sp)
		sw $a2, ($sp)
		move $a2, $v0 #$a2 = base.
		
		addi $t6, $zero, 0 #Loop counter.
		
		loop_7:
			lw $a1, ($t5) #Storing value from array into $t3.
			addi $t5, $t5, 4 #Forwarding array address.
			addi $t6, $t6, 1 #Forwarding loop counter.
			jal print_num
			beq $t6, $t4, skip_comma
			la $a0, comma_sign
			li $v0, 4
			syscall
			skip_comma:
				blt $t6, $t4, loop_7
		
		
		#Presenting the base chosen.
		la $a0, base_msg
		li $v0, 4
		syscall
		move $a0, $a2
		li $v0, 1
		syscall
		la $a0, closing_bracket
		li $v0, 4
		syscall
		la $a0, new_line
		syscall
		lw $a2, ($sp) #Restoring original values for $a2 = arr address and $a1 = NUM.
		addi $sp, $sp, 4
		lw $a1, ($sp)	
		j table		
		
		

sort_and_print:
	bne $a1, $zero, not_empty_7
	la $a0, empty_msg
	li $v0, 4
	syscall
	j table	
	
	not_empty_7:
		addi $s4, $zero, 0 #Will hold the address of the second value in the array.
		addi $s5, $zero, 0 #Will hold a value.
		addi $s6, $zero, 0 #Will hold a value.
		addi $s7, $zero, 0 #slt indicator.
		move $t6, $a3 #Holding on to the original address of new arr.
		addi $t7, $zero, 0 #New arr NUM.
		addi $t8, $zero, 0 #Helper variable.
		addi $t9, $zero, 0 #Loop counter.
		move $t9, $a1
		addi $t9, $t9, -1 #$t9 = number of loop iterations.
		move $s4, $a2
		addi $s4, $s4, 4 #$s4 = address of the second value in the array.
		lw $s5, ($a2) #Min value is the first value by default.
		
		loop_8:
			lw $s6, ($s4) 
			addi $s4, $s4, 4
			slt $s7, $s5, $s6
			beq $s7, 1, no_change_2
			sub $sp, $sp, 12
			sw $a1, 8($sp) #Storing original values in Stack.
			sw $a2, 4($sp)
			sw $a3, ($sp)
			move $a1, $t7 #Reading the registers for 'check' procedure.
			move $a2, $a3
			move $a3, $s6
			jal check
			lw $a3, ($sp) #Resotring values from Stack.
			addi $sp, $sp, 4
			lw $a2, ($sp)
			addi $sp, $sp, 4
			lw $a1, ($sp)
			bne $v0, -1, no_change_2 #If the value we found is already in the new array - skip.
			move $s5, $s6
			no_change_2:
				sub $sp, $sp, 12
				sw $a1, 8($sp) #Storing original values in Stack.
				sw $a2, 4($sp)
				sw $a3, ($sp)
				move $a1, $t7 #Reading the registers for 'check' procedure.
				move $a2, $a3
				move $a3, $s5
				jal check
				lw $a3, ($sp) #Resotring values from Stack.
				addi $sp, $sp, 4
				lw $a2, ($sp)
				addi $sp, $sp, 4
				lw $a1, ($sp)
				addi $t8, $t8, 1
				beq $v0, -1, cont
				move $s5, $s6
				cont:
				blt $t8, $t9, loop_8
				
			sw $s5, ($t6) #Write value to new arr.
			addi $t7, $t7, 1 #Increment number of values in new arr.
			addi $t6, $t6, 4 #Increase new arr address.
			lw $s5, ($a2) #Min value is the first value by default.
			move $s4, $a2
			addi $s4, $s4, 4 #$s4 = address of the second value in the array.
			move $t9, $a1
			addi $t9, $t9, -1 #$t9 = number of loop iterations.
			addi $t8, $zero, 0
			beq $t7, $a1, exit
			j loop_8
			
			exit:
			sub $sp, $sp, 8
			sw $a1, 4($sp)
			sw $a2, ($sp)
			la $a0, base_elements_prompt
			li $v0, 4
			syscall
			li $v0, 5
			syscall
			move $a2, $v0
			
			addi $s7, $zero, 0 #Loop counter.
			move $t6, $a3
			loop_9:
				lw $a1, ($t6)
				addi $t6, $t6, 4
				addi $s7, $s7, 1
				jal print_num
				beq $s7, $t7, skip_comma_2
				la $a0, comma_sign
				li $v0, 4
				syscall
				skip_comma_2:
					blt $s7, $t7, loop_9
			
			#Presenting the base chosen.
			la $a0, base_msg
			li $v0, 4
			syscall
			move $a0, $a2
			li $v0, 1
			syscall
			la $a0, closing_bracket
			li $v0, 4
			syscall
			la $a0, new_line
			syscall
			lw $a2, ($sp)
			addi $sp, $sp, 4
			lw $a1, ($sp)
			
			j table
			
			
			
			
END:
	li $v0, 10	#Exit
	syscall
	
check:
	addi $t0, $zero, 0 #Initializing loop varaibles.
	addi, $t2, $zero, -1
	addi $t3, $zero, 0
	
	loop: #This loop goes over the array and if it doesn't find the value it returns -1, or the index number otherwise.
		sll $t0, $t3, 2
		add $t0, $t0, $a2
		lw $t1, ($t0)
		beq $t1, $a3, found
		addi $t3, $t3, 1
		blt $t3, $a1, loop
		move $v0, $t2
		jr $ra
	found:
		move $v0, $t3
		jr $ra
		
		
reduction:
	addi $t0, $a3, 0 #Helper variables.
	addi $t1, $t0, 1
	sll $t0, $t0, 2
	sll $t1, $t1, 2
	add $t0, $t0, $a2
	add $t1, $t1, $a2
	
	loop_2: #This loop shrinks the array by one word.
		lw $t2, ($t0)
		lw $t3, ($t1)
		sw $t3, ($t0)
		addi $t0, $t0, 4
		addi $t1, $t1, 4
		addi $a3, $a3, 1
		blt $a3, $a1, loop_2			
		jr $ra
		
print_num:
	addi $t0, $zero, 0 #Helper variables.
	addi $t1, $zero, 0
	move $t2, $a2 #To be used later.
	bgt $a1, $zero, loop_4 #If number is positive, skip 2's complements procedure.
	not $a1, $a1 #2's complement.
	addi $a1, $a1, 1
	la $a0, minus_sign
	li $v0, 4
	syscall

	loop_4: #This loop uses the Stack and the registers LO, HI to store the number's value, according to the chosen base.
		subi $sp, $sp, 4 
		div $a1, $a2
		mflo $a1
		mfhi $t0
		sw $t0, ($sp)
		addi $t1, $t1, 1
		bgt $a1, $zero, loop_4
	
	loop_5: #This loop reads the number's value from the stack and displayes it.
		lw $s0, ($sp)
		la $a0, ($s0)
		li $v0, 1
		syscall
		addi $sp, $sp, 4
		addi $t1, $t1, -1
		bgt $t1, 0, loop_5
	jr $ra	
	
